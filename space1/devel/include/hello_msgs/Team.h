// Generated by gencpp from file hello_msgs/Team.msg
// DO NOT EDIT!


#ifndef HELLO_MSGS_MESSAGE_TEAM_H
#define HELLO_MSGS_MESSAGE_TEAM_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <hello_msgs/Student.h>
#include <std_msgs/String.h>
#include <geometry_msgs/Pose.h>
#include <hello_msgs/Student.h>

namespace hello_msgs
{
template <class ContainerAllocator>
struct Team_
{
  typedef Team_<ContainerAllocator> Type;

  Team_()
    : name()
    , leader()
    , introduction()
    , location()
    , members()  {
    }
  Team_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , leader(_alloc)
    , introduction(_alloc)
    , location(_alloc)
    , members(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef  ::hello_msgs::Student_<ContainerAllocator>  _leader_type;
  _leader_type leader;

   typedef  ::std_msgs::String_<ContainerAllocator>  _introduction_type;
  _introduction_type introduction;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _location_type;
  _location_type location;

   typedef std::vector< ::hello_msgs::Student_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::hello_msgs::Student_<ContainerAllocator> >> _members_type;
  _members_type members;





  typedef boost::shared_ptr< ::hello_msgs::Team_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hello_msgs::Team_<ContainerAllocator> const> ConstPtr;

}; // struct Team_

typedef ::hello_msgs::Team_<std::allocator<void> > Team;

typedef boost::shared_ptr< ::hello_msgs::Team > TeamPtr;
typedef boost::shared_ptr< ::hello_msgs::Team const> TeamConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hello_msgs::Team_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hello_msgs::Team_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hello_msgs::Team_<ContainerAllocator1> & lhs, const ::hello_msgs::Team_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.leader == rhs.leader &&
    lhs.introduction == rhs.introduction &&
    lhs.location == rhs.location &&
    lhs.members == rhs.members;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hello_msgs::Team_<ContainerAllocator1> & lhs, const ::hello_msgs::Team_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hello_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hello_msgs::Team_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hello_msgs::Team_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hello_msgs::Team_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hello_msgs::Team_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hello_msgs::Team_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hello_msgs::Team_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hello_msgs::Team_<ContainerAllocator> >
{
  static const char* value()
  {
    return "013e89f64a6eee989d320d356cdbd74c";
  }

  static const char* value(const ::hello_msgs::Team_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x013e89f64a6eee98ULL;
  static const uint64_t static_value2 = 0x9d320d356cdbd74cULL;
};

template<class ContainerAllocator>
struct DataType< ::hello_msgs::Team_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hello_msgs/Team";
  }

  static const char* value(const ::hello_msgs::Team_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hello_msgs::Team_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"Student leader\n"
"std_msgs/String introduction\n"
"geometry_msgs/Pose location\n"
"Student[] members\n"
"================================================================================\n"
"MSG: hello_msgs/Student\n"
"string name\n"
"int32 age\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::hello_msgs::Team_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hello_msgs::Team_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.leader);
      stream.next(m.introduction);
      stream.next(m.location);
      stream.next(m.members);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Team_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hello_msgs::Team_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hello_msgs::Team_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "leader: ";
    s << std::endl;
    Printer< ::hello_msgs::Student_<ContainerAllocator> >::stream(s, indent + "  ", v.leader);
    s << indent << "introduction: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.introduction);
    s << indent << "location: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.location);
    s << indent << "members[]" << std::endl;
    for (size_t i = 0; i < v.members.size(); ++i)
    {
      s << indent << "  members[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hello_msgs::Student_<ContainerAllocator> >::stream(s, indent + "    ", v.members[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HELLO_MSGS_MESSAGE_TEAM_H
