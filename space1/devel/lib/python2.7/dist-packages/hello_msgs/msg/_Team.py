# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hello_msgs/Team.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import hello_msgs.msg
import std_msgs.msg

class Team(genpy.Message):
  _md5sum = "013e89f64a6eee989d320d356cdbd74c"
  _type = "hello_msgs/Team"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string name
Student leader
std_msgs/String introduction
geometry_msgs/Pose location
Student[] members
================================================================================
MSG: hello_msgs/Student
string name
int32 age
================================================================================
MSG: std_msgs/String
string data

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['name','leader','introduction','location','members']
  _slot_types = ['string','hello_msgs/Student','std_msgs/String','geometry_msgs/Pose','hello_msgs/Student[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       name,leader,introduction,location,members

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Team, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.name is None:
        self.name = ''
      if self.leader is None:
        self.leader = hello_msgs.msg.Student()
      if self.introduction is None:
        self.introduction = std_msgs.msg.String()
      if self.location is None:
        self.location = geometry_msgs.msg.Pose()
      if self.members is None:
        self.members = []
    else:
      self.name = ''
      self.leader = hello_msgs.msg.Student()
      self.introduction = std_msgs.msg.String()
      self.location = geometry_msgs.msg.Pose()
      self.members = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.leader.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.leader.age
      buff.write(_get_struct_i().pack(_x))
      _x = self.introduction.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.location.position.x, _x.location.position.y, _x.location.position.z, _x.location.orientation.x, _x.location.orientation.y, _x.location.orientation.z, _x.location.orientation.w))
      length = len(self.members)
      buff.write(_struct_I.pack(length))
      for val1 in self.members:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.age
        buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.leader is None:
        self.leader = hello_msgs.msg.Student()
      if self.introduction is None:
        self.introduction = std_msgs.msg.String()
      if self.location is None:
        self.location = geometry_msgs.msg.Pose()
      if self.members is None:
        self.members = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.leader.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.leader.name = str[start:end]
      start = end
      end += 4
      (self.leader.age,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.introduction.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.introduction.data = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.location.position.x, _x.location.position.y, _x.location.position.z, _x.location.orientation.x, _x.location.orientation.y, _x.location.orientation.z, _x.location.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.members = []
      for i in range(0, length):
        val1 = hello_msgs.msg.Student()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (val1.age,) = _get_struct_i().unpack(str[start:end])
        self.members.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.leader.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.leader.age
      buff.write(_get_struct_i().pack(_x))
      _x = self.introduction.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.location.position.x, _x.location.position.y, _x.location.position.z, _x.location.orientation.x, _x.location.orientation.y, _x.location.orientation.z, _x.location.orientation.w))
      length = len(self.members)
      buff.write(_struct_I.pack(length))
      for val1 in self.members:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.age
        buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.leader is None:
        self.leader = hello_msgs.msg.Student()
      if self.introduction is None:
        self.introduction = std_msgs.msg.String()
      if self.location is None:
        self.location = geometry_msgs.msg.Pose()
      if self.members is None:
        self.members = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.leader.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.leader.name = str[start:end]
      start = end
      end += 4
      (self.leader.age,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.introduction.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.introduction.data = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.location.position.x, _x.location.position.y, _x.location.position.z, _x.location.orientation.x, _x.location.orientation.y, _x.location.orientation.z, _x.location.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.members = []
      for i in range(0, length):
        val1 = hello_msgs.msg.Student()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (val1.age,) = _get_struct_i().unpack(str[start:end])
        self.members.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
